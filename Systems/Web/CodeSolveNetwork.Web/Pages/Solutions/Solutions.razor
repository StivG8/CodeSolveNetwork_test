@page "/solutions"
@using CodeSolveNetwork.Web.Pages.Solutions.Services
@using CodeSolveNetwork.Web.Pages.Solutions.Models
@using CodeSolveNetwork.Web.Components
@using Microsoft.AspNetCore.Authorization
@inject ISolutionService SolutionService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]
@layout MainLayout

<PageTitle>Solutions</PageTitle>

<MudText Typo="Typo.h4" Class="ma-8">Solutions</MudText>

<MudTable Items="@solutions" Class="ma-8">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddSolution">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Code</MudTh>
        <MudTh>Task</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Code">@context.Code</MudTd>
            <MudTd DataLabel="Task">@context.TaskTitle</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => EditSolution(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => DeleteSolution(context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private IEnumerable<SolutionModel> solutions = new List<SolutionModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        solutions = await SolutionService.GetSolutions();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddSolution()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<SolutionDialog>("Add solution", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            var solutionModel = ((SolutionDialog)dialog.Dialog).Model;
            var createSolutionModel = new CreateSolutionModel()
                {
                    TaskId = solutionModel.TaskId,
                    Code = solutionModel.Code,
                    Description = solutionModel.Description
                };
            await SolutionService.AddSolution(createSolutionModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task EditSolution(Guid solutionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("SolutionId", solutionId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<SolutionDialog>("Edit solution", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var model = ((SolutionDialog)dialog.Dialog).Model;
        var updateModel = new UpdateSolutionModel()
            {
                Code = model.Code,
                Description = model.Description
            };

        await SolutionService.EditSolution(solutionId, updateModel);
        await ReloadData();
    }

    private async Task DeleteSolution(Guid solutionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this solution? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete book", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        await SolutionService.DeleteSolution(solutionId);
        await ReloadData();
    }
}