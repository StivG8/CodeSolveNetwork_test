﻿@using CodeSolveNetwork.Web.Pages.Solutions.Models
@using CodeSolveNetwork.Web.Pages.Solutions.Services
@using CodeSolveNetwork.Web.Pages.Tasks.Models
@using CodeSolveNetwork.Web.Pages.Tasks.Services
@inherits MudComponentBase

@inject ISolutionService SolutionService
@inject ITaskService TaskService

<MudDialog>
    <DialogContent>
        <MudForm Model="Model" @ref="form">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Code" @bind-Value="Model.Code"
                                  For="@(() => Model.Code)"
                                  Required="true"
                                  RequiredError="Code is required!">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectTask" T="Guid" Label="Task" @bind-Value="Model.TaskId" For="@(() => Model.TaskId)">
                        <MudSelectItem T="Guid" Value="Guid.Empty">&nbsp;</MudSelectItem>
                        @foreach (var task in Tasks)
                        {
                            <MudSelectItem T="Guid" Value="@task.Id">@task.Title</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Description"
                                  Lines="5"
                                  For="@(() => Model.Description)"
                                  @bind-Value="Model.Description">
                    </MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Guid? SolutionId { get; set; }

    [Parameter] public SolutionModel Model { get; set; } = new();

    private MudForm form = default!;

    MudSelect<Guid> selectTask = default!;
    private List<TaskModel> Tasks { get; set; } = new List<TaskModel>();

    protected override async Task OnInitializedAsync()
    {
        var tasks = await TaskService.GetTasks();
        Tasks.AddRange(tasks);

        if (SolutionId != null)
        {
            var solution = await SolutionService.GetSolution(SolutionId.Value);

            Model.Id = solution.Id;
            Model.TaskId = solution.TaskId;
            Model.Code = solution.Code;
            Model.Description = solution.Description;
        }
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}