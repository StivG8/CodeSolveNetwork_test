@page "/programmingLanguages"
@using CodeSolveNetwork.Web.Components
@using CodeSolveNetwork.Web.Pages.ProgrammingLanguages.Services
@using CodeSolveNetwork.Web.Pages.ProgrammingLanguages.Models
@* @using Microsoft.AspNetCore.Authorization *@
@inject IProgrammingLanguageService ProgrammingLanguageService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@* @attribute [Authorize] *@
@layout MainLayout

<PageTitle>ProgrammingLanguages</PageTitle>

<MudText Typo="Typo.h4" Class="ma-8">ProgrammingLanguages</MudText>@* текстовая надпись *@

<MudTable Items="@programmingLanguages" Class="ma-8">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddProgrammingLanguage">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Tasks</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Tasks">@string.Join(", ", context.Tasks)</MudTd>
        <MudTd>@* кнопки для удаления и редактирования *@
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => EditProgrammingLanguage(context.Id)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => DeleteProgrammingLanguage(context.Id)" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<ProgrammingLanguageModel> programmingLanguages = new List<ProgrammingLanguageModel>();
    private string searchString = string.Empty;

    private async Task ReloadData()
    {
        programmingLanguages = await ProgrammingLanguageService.GetProgrammingLanguages();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task AddProgrammingLanguage()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<ProgrammingLanguageDialog>("Add programming language", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;
        
        try
        {
            var programmingLanguageModel = ((ProgrammingLanguageDialog)dialog.Dialog).Model;
            var createProgrammingLanguageModel = new CreateProgrammingLanguageModel()
            {
                 Name = programmingLanguageModel.Name
            };
            await ProgrammingLanguageService.AddProgrammingLanguage(createProgrammingLanguageModel);
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task EditProgrammingLanguage(Guid programmingLanguageid)
    {
        var parameters = new DialogParameters();
        parameters.Add("ProgrammingLanguageId", programmingLanguageid);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<ProgrammingLanguageDialog>("Edit programming language", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var model = ((ProgrammingLanguageDialog)dialog.Dialog).Model;
        var updateModel = new UpdateProgrammingLanguageModel()
        {
            Name = model.Name
        };
        
        await ProgrammingLanguageService.EditProgrammingLanguage(programmingLanguageid, updateModel);
        await ReloadData();
    }

    private async Task DeleteProgrammingLanguage(Guid programmingLanguageid)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this programming language? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete book", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;
        
        await ProgrammingLanguageService.DeleteProgrammingLanguage(programmingLanguageid);
        await ReloadData();
    }
}